worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # =================================================================================
    # RATE LIMITING CONFIGURATION
    #
    # Define rate limiting zones to prevent spam and high volume attacks
    # =================================================================================
    
    # General rate limit: 10 requests per second per IP
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    
    # Strict rate limit for login/auth endpoints: 5 requests per minute per IP
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;
    
    # API rate limit: 30 requests per minute per IP
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;

    # =================================================================================
    # COMBINED BOT BLOCKING MAP
    #
    # Sets $block_bot to 1 if the User-Agent is a known bot or is empty.
    # Googlebot is specifically allowed by keeping its value at 0.
    # =================================================================================
    map $http_user_agent $block_bot {
        default 0; # Default: Do not block

        # Rule 1: Allow Googlebot
        "~*googlebot" 0;

        # Rule 2: Block common bots, scrapers, vulnerability scanners, and e2e testing tools
        # This list includes bots you had, plus a few other common ones and e2e testing tools.
        "~*(AhrefsBot|Baiduspider|bingbot|Bytespider|DotBot|PetalBot|SemrushBot|YandexBot|MJ12bot|Scrapy|python-requests|go-http-client|curl|wget|undici|node|HeadlessChrome|Playwright|Puppeteer|Selenium|WebDriver|ChromeHeadless|PhantomJS|SlimerJS|Cypress|TestCafe|Nightmare|Zombie)" 1;

        # Rule 3: Block empty User-Agent strings
        "" 1;
    }


    server {
        listen 80;
        listen [::]:80;
        server_name your_domain.com www.your_domain.com; # <-- Remember to change this

        root /usr/share/nginx/html;
        index index.html;

        # Main location block for your application
        location / {
            # =============================================================================
            # BLOCKING LOGIC - PLACED CORRECTLY INSIDE THE LOCATION BLOCK
            #
            # This is the first check. If a bot is detected, it's immediately blocked.
            # =============================================================================
            if ($block_bot) {
                return 403; # Forbidden
            }

            # =============================================================================
            # RATE LIMITING - PREVENT SPAM AND HIGH VOLUME REQUESTS
            #
            # Apply general rate limiting to prevent spam attacks
            # Burst of 20 requests allowed, then rate limited to 10r/s
            # =============================================================================
            limit_req zone=general burst=20 nodelay;

            # If it's not a bot and passes rate limiting, NGINX proceeds to serve the file.
            try_files $uri $uri/ /index.html;
        }

        # =============================================================================
        # API ENDPOINTS WITH RATE LIMITING
        # =============================================================================
        location /api/ {
            # Block bots first
            if ($block_bot) {
                return 403;
            }

            # Apply API-specific rate limiting (30 requests per minute)
            limit_req zone=api burst=10 nodelay;

            # Add your API proxy or file serving logic here
            try_files $uri $uri/ =404;
        }

        # =============================================================================
        # AUTHENTICATION ENDPOINTS WITH STRICT RATE LIMITING
        # =============================================================================
        location ~ ^/(login|auth|register|forgot-password) {
            # Block bots first
            if ($block_bot) {
                return 403;
            }

            # Apply strict rate limiting for auth endpoints (5 requests per minute)
            limit_req zone=auth burst=3 nodelay;

            # Add your auth handling logic here
            try_files $uri $uri/ =404;
        }

        # =============================================================================
        # ADDITIONAL SECURITY HEADERS
        # =============================================================================
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # ... other configurations like location /api { ... }
        # REMEMBER: You must add the 'if ($block_bot)' block to any other
        # location blocks you want to protect.
    }
}